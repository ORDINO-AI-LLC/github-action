name: 'Ordino Test Runner'
description: 'Run Ordino tests with Cypress or Playwright, with automatic sharding and report upload to Ordino dashboard'
author: 'Ordino'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  # Test Framework Selection
  test-framework:
    description: 'Testing framework to use (cypress or playwright)'
    required: true
    default: 'cypress'
  
  # Common Inputs
  node-version:
    description: 'Node.js version to use'
    required: false
    default: '20'
  
  shards:
    description: 'Number of parallel shards to run'
    required: false
    default: '2'
  
  initialize-command:
    description: 'Command to initialize the project'
    required: false
    default: 'npm run initialize'
  
  test-command:
    description: 'Command to run tests'
    required: false
    default: 'npm run oi:run:test'
  
  ordino-url:
    description: 'Ordino API URL'
    required: false
    default: 'https://api.ordino.io'
  
  working-directory:
    description: 'Working directory for the tests'
    required: false
    default: '.'
  
  # Cypress Specific
  cypress-browser-image:
    description: 'Cypress browser image version (cypress only)'
    required: false
    default: 'cypress/browsers:node-20.17.0-chrome-128.0.6613.119-1-ff-130.0-edge-128.0.2739.63-1'
  
  config-file:
    description: 'Cypress configuration file (cypress only)'
    required: false
    default: 'ordino.config.ts'
  
  # Playwright Specific
  playwright-image:
    description: 'Playwright Docker image version (playwright only)'
    required: false
    default: 'mcr.microsoft.com/playwright:v1.52.0-jammy'
  
  install-playwright-browsers:
    description: 'Install Playwright browsers'
    required: false
    default: 'true'
  
  # Credentials
  ordino-key:
    description: 'Ordino API key (can also be set via ORDINO_KEY env or .env file)'
    required: false
  
  project-id:
    description: 'Project ID for Ordino (can also be set via PROJECT_ID env or .env file)'
    required: false
  
  use-env-file:
    description: 'Use .env file for credentials if not provided'
    required: false
    default: 'true'
  
  # Control Options
  skip-upload:
    description: 'Skip uploading results to Ordino dashboard'
    required: false
    default: 'false'
  
  continue-on-error:
    description: 'Continue workflow even if tests fail'
    required: false
    default: 'true'

outputs:
  test-results-path:
    description: 'Path to test results file'
    value: ${{ steps.prepare-report.outputs.report-path }}
  
  tests-passed:
    description: 'Whether all tests passed'
    value: ${{ steps.run-tests.outputs.tests-passed }}
  
  report-uploaded:
    description: 'Whether the report was successfully uploaded'
    value: ${{ steps.upload-report.outputs.success }}
  
  ordino-dashboard-url:
    description: 'URL to view results in Ordino dashboard'
    value: ${{ steps.upload-report.outputs.dashboard-url }}

runs:
  using: "composite"
  steps:
    # Step 0: Install Required Tools (for Alpine containers)
    - name: Setup Container Environment
      shell: sh
      run: |
        echo "üîß Setting up container environment..."
        
        # Detect if we're in Alpine Linux
        if [ -f /etc/alpine-release ]; then
          echo "Detected Alpine Linux container"
          # Check if bash is installed
          if ! command -v bash >/dev/null 2>&1; then
            echo "Installing bash..."
            apk add --no-cache bash
          fi
          # Check if curl is installed
          if ! command -v curl >/dev/null 2>&1; then
            echo "Installing curl..."
            apk add --no-cache curl
          fi
        fi
        
        # Detect if we're in Debian/Ubuntu
        if [ -f /etc/debian_version ]; then
          echo "Detected Debian/Ubuntu container"
          # Check if curl is installed
          if ! command -v curl >/dev/null 2>&1; then
            echo "Installing curl..."
            apt-get update && apt-get install -y curl
          fi
        fi
    
    # Step 1: Setup Environment
    - name: Setup Environment
      id: setup
      shell: bash
      run: |
        echo "üöÄ Setting up Ordino Test Runner"
        echo "Framework: ${{ inputs.test-framework }}"
        echo "Shards: ${{ inputs.shards }}"
        echo "Working Directory: ${{ inputs.working-directory }}"
        
        # Validate framework selection
        if [[ "${{ inputs.test-framework }}" != "cypress" && "${{ inputs.test-framework }}" != "playwright" ]]; then
          echo "‚ùå Error: test-framework must be either 'cypress' or 'playwright'"
          exit 1
        fi
    
    # Step 2: Load Credentials
    - name: Load Credentials
      id: load-credentials
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        # Priority: Input parameters > Environment variables > .env file
        ORDINO_KEY="${{ inputs.ordino-key }}"
        PROJECT_ID="${{ inputs.project-id }}"
        
        # Try environment variables if inputs are empty
        if [ -z "$ORDINO_KEY" ]; then
          ORDINO_KEY="${ORDINO_KEY:-${{ env.ORDINO_KEY }}}"
        fi
        if [ -z "$PROJECT_ID" ]; then
          PROJECT_ID="${PROJECT_ID:-${{ env.PROJECT_ID }}}"
        fi
        
        # Try .env file if still empty and use-env-file is true
        if [[ "${{ inputs.use-env-file }}" == "true" ]] && [[ -z "$ORDINO_KEY" || -z "$PROJECT_ID" ]]; then
          if [ -f ".env" ]; then
            echo "üìÅ Loading credentials from .env file..."
            # Export variables from .env
            set -a
            source .env
            set +a
          fi
        fi
        
        # Mask and output credentials
        if [ -n "$ORDINO_KEY" ]; then
          echo "::add-mask::$ORDINO_KEY"
          echo "ordino-key=$ORDINO_KEY" >> $GITHUB_OUTPUT
          echo "‚úÖ ORDINO_KEY loaded"
        else
          echo "‚ö†Ô∏è Warning: ORDINO_KEY not found"
        fi
        
        if [ -n "$PROJECT_ID" ]; then
          echo "::add-mask::$PROJECT_ID"
          echo "project-id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ PROJECT_ID loaded"
        else
          echo "‚ö†Ô∏è Warning: PROJECT_ID not found"
        fi
        
        # Only fail if we're not skipping upload
        if [[ "${{ inputs.skip-upload }}" == "false" ]] && [[ -z "$ORDINO_KEY" || -z "$PROJECT_ID" ]]; then
          echo "‚ùå Error: ORDINO_KEY and PROJECT_ID are required for uploading results"
          echo "Please provide them via:"
          echo "  1. Action inputs (ordino-key, project-id)"
          echo "  2. Environment variables (ORDINO_KEY, PROJECT_ID)"
          echo "  3. .env file in your project"
          exit 1
        fi
    
    # Step 3: Cache Dependencies
    - name: Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.cache
          ${{ inputs.working-directory }}/node_modules
        key: ordino-${{ inputs.test-framework }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ordino-${{ inputs.test-framework }}-${{ runner.os }}-
    
    # Step 4: Install Dependencies
    - name: Install Dependencies
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        ORDINO_KEY: ${{ steps.load-credentials.outputs.ordino-key }}
      run: |
        echo "üì¶ Installing dependencies..."
        
        # Try the initialize command first
        if ! ${{ inputs.initialize-command }} --legacy-peer-deps --omit=optional; then
          echo "Initialize command failed, trying without flags..."
          ${{ inputs.initialize-command }}
        fi
        
        # Install Playwright browsers if needed
        if [[ "${{ inputs.test-framework }}" == "playwright" ]] && [[ "${{ inputs.install-playwright-browsers }}" == "true" ]]; then
          echo "üé≠ Installing Playwright browsers..."
          # Check if we're in a container that supports browser installation
          if [ -f /etc/alpine-release ]; then
            echo "‚ö†Ô∏è Warning: Alpine Linux detected. Installing additional dependencies for Playwright..."
            apk add --no-cache \
              chromium \
              nss \
              freetype \
              freetype-dev \
              harfbuzz \
              ca-certificates \
              ttf-freefont \
              nodejs \
              npm
          fi
          
          # Install Playwright and browsers
          if command -v npx &> /dev/null; then
            npx playwright install chromium || true
            npx playwright install-deps chromium || true
          else
            echo "‚ö†Ô∏è Warning: npx not found, skipping Playwright browser installation"
          fi
        fi
    
    # Step 5: Run Tests
    - name: Run Tests
      id: run-tests
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        ORDINO_KEY: ${{ steps.load-credentials.outputs.ordino-key }}
        TEST_FRAMEWORK: ${{ inputs.test-framework }}
        SPLIT: ${{ inputs.shards }}
        SPLIT_INDEX: '0'
        SPLIT_INDEX_PLAYWRIGHT: '0'
      run: |
        echo "üß™ Running ${{ inputs.test-framework }} tests..."
        
        # Create report directory
        mkdir -p ordino-report
        
        # Set test exit code variable
        TEST_EXIT_CODE=0
        
        # Run tests based on framework
        if [[ "${{ inputs.test-framework }}" == "cypress" ]]; then
          echo "Running Cypress tests..."
          # Create subdirectories for Cypress
          mkdir -p ordino-report/report
          
          # Run the test command
          if ${{ inputs.test-command }}; then
            echo "‚úÖ Tests completed successfully"
          else
            TEST_EXIT_CODE=$?
            echo "‚ö†Ô∏è Tests completed with exit code: $TEST_EXIT_CODE"
          fi
        else
          echo "Running Playwright tests..."
          # Create subdirectories for Playwright
          mkdir -p ordino-report/mochawesome
          
          # Run the test command
          if ${{ inputs.test-command }}; then
            echo "‚úÖ Tests completed successfully"
          else
            TEST_EXIT_CODE=$?
            echo "‚ö†Ô∏è Tests completed with exit code: $TEST_EXIT_CODE"
          fi
        fi
        
        # Set output based on test results
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo "tests-passed=true" >> $GITHUB_OUTPUT
        else
          echo "tests-passed=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.continue-on-error }}" == "false" ]]; then
            exit $TEST_EXIT_CODE
          fi
        fi
    
    # Step 6: Prepare Report
    - name: Prepare Test Report
      id: prepare-report
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "üìä Preparing test report..."
        
        if [[ "${{ inputs.test-framework }}" == "cypress" ]]; then
          # Cypress report handling
          if ls ordino-report/report/*.json 1> /dev/null 2>&1; then
            echo "Merging Cypress reports..."
            # Check if mochawesome-merge is available
            if command -v npx &> /dev/null; then
              npx mochawesome-merge "ordino-report/report/*.json" > ordino-report/final-report.json || {
                echo "Failed to merge reports, using first report..."
                cp ordino-report/report/*.json ordino-report/final-report.json
              }
            else
              echo "npx not available, using first report file..."
              cp ordino-report/report/*.json ordino-report/final-report.json
            fi
            echo "report-path=ordino-report/final-report.json" >> $GITHUB_OUTPUT
          else
            echo "No Cypress reports found, creating empty report..."
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0},"results":[]}' > ordino-report/final-report.json
            echo "report-path=ordino-report/final-report.json" >> $GITHUB_OUTPUT
          fi
        else
          # Playwright report handling
          if [ -f "ordino-report/mochawesome/mochawesome.json" ]; then
            cp ordino-report/mochawesome/mochawesome.json ordino-report/final-report.json
            echo "report-path=ordino-report/final-report.json" >> $GITHUB_OUTPUT
          elif [ -f "ordino-report/mochawesome.json" ]; then
            cp ordino-report/mochawesome.json ordino-report/final-report.json
            echo "report-path=ordino-report/final-report.json" >> $GITHUB_OUTPUT
          else
            echo "No Playwright report found, creating empty report..."
            echo '{"stats":{"suites":0,"tests":0,"passes":0,"pending":0,"failures":0},"results":[]}' > ordino-report/final-report.json
            echo "report-path=ordino-report/final-report.json" >> $GITHUB_OUTPUT
          fi
        fi
    
    # Step 7: Upload Report to Ordino
    - name: Upload Report to Ordino
      id: upload-report
      if: ${{ inputs.skip-upload == 'false' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "‚òÅÔ∏è Uploading report to Ordino dashboard..."
        
        API_URL="${{ inputs.ordino-url }}/api/v1/test-report-external"
        BUILD_ID="${GITHUB_RUN_ID}"
        PROJECT_ID="${{ steps.load-credentials.outputs.project-id }}"
        API_KEY="${{ steps.load-credentials.outputs.ordino-key }}"
        REPORT_PATH="${{ steps.prepare-report.outputs.report-path }}"
        
        if [ ! -f "$REPORT_PATH" ]; then
          echo "‚ùå Error: Report file not found at $REPORT_PATH"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Upload the report
        response=$(curl --location "$API_URL" \
          --header "Ordino-Key: $API_KEY" \
          --form "file=@$REPORT_PATH" \
          --form "ProjectId=$PROJECT_ID" \
          --form "ExecutionId=$BUILD_ID" \
          --write-out "%{http_code}" \
          --silent \
          --output response.json)
        
        if [ "$response" -eq 200 ] || [ "$response" -eq 201 ]; then
          echo "‚úÖ Report uploaded successfully!"
          echo "success=true" >> $GITHUB_OUTPUT
          echo "dashboard-url=${{ inputs.ordino-url }}/dashboard/project/$PROJECT_ID/execution/$BUILD_ID" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Failed to upload report. HTTP status: $response"
          if [ -f response.json ]; then
            cat response.json
          fi
          echo "success=false" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.continue-on-error }}" == "false" ]]; then
            exit 1
          fi
        fi
    
    # Step 8: Summary
    - name: Generate Summary
      if: always()
      shell: bash
      run: |
        echo "## üìä Ordino Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Framework**: ${{ inputs.test-framework }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tests Passed**: ${{ steps.run-tests.outputs.tests-passed }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Report Uploaded**: ${{ steps.upload-report.outputs.success }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.upload-report.outputs.dashboard-url }}" != "" ]]; then
          echo "- **Dashboard**: [${{ steps.upload-report.outputs.dashboard-url }}](${{ steps.upload-report.outputs.dashboard-url }})" >> $GITHUB_STEP_SUMMARY
        fi
